## Bash Profile with useful settings and aliases
##
##
## Meant to be cloned to workstation for consistent terminal use
##
## Based on https://natelandau.com/my-mac-osx-bash_profile/

export GNUTERM=x11
#   -------------------------------
#   1. ENVIRONMENT CONFIGURATION
#   -------------------------------

#   Change Prompt
#   ------------------------------------------------------------

## git_branch() defined at end of file

PS1="$(tput sgr 0 1) \`pwd\`                                            \`git_branch\` $(tput sgr0) | "
PS1+="\u @ \h  \n| =>"
export PS1
export PS2="| =>"

#   Set Paths
#   ------------------------------------------------------------
# Provide a variable with the location of this script.
SCRIPT_PATH="$( /usr/bin/cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

export PATH="$PATH:/usr/local/bin"
export PATH="$PATH:/Users/$USER/bin"
export PATH="$PATH:$SCRIPT_PATH/scripts"

#   Set Default Editor
#   ------------------------------------------------------------
export EDITOR=/usr/bin/vim

#   -------------------------------
#   2. TERMINAL ALIASES AND FUNCTIONS
#   -------------------------------

alias edit="vim"

alias cp="cp -iv"
function mv ()
{
    dir="$2"
    tmp="$2"; tmp="${tmp: -1}"
    [ "$tmp" != "/" ] && dir="$(dirname "$2")"
    [ -a "$dir" ] ||
    mkdir -p "$dir" &&
    /bin/mv -iv "$@"
}
alias ls="ls -FGlAhp"
alias less="less -FSRXc"
alias mkdir="mkdir -pv"

mcd() { mkdir $1; cd $1; }
cd() { builtin cd "$@"; ls; }
alias cd..='cd ../'
alias ..='cd ../'
alias ...='cd ../../'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../../'
alias .6='cd ../../../../../../'
alias ~="cd ~"

alias clr="clear"
alias cls="clear"
alias c="clear"
alias finder="open -a Finder ./"

alias show_options="shopt"

trash () { command mv "$@" ~/.Trash ; }
ql () { qlmanage -p "$*" >& /dev/null; }

mans () {
  man $1 | grep -iC2 --color=always $2 | less
}

#   -------------------------------
#   3. FILE AND FOLDER MANAGEMENT
#   -------------------------------

zipf () { zip -r "$1".zip "$1" ; }

alias numFiles='echo $(ls -1 | wc -l)'


cdf () {
  currFolderPath=$( /usr/bin/osascript <<EOT
    tell application "Finder"
      try
    set currFolder to (folder of the front window as alias)
      on error
    set currFolder to (path to desktop folder as alias)
      end try
      POSIX path of currFolder
    end tell
EOT
  )
  echo "cd to \"$currFolderPath\""
  cd "$currFolderPath"
}


extract () {
  if [ -f $1 ] ; then
     case $1 in
       *.tar.bz2)   tar xjf $1     ;;
       *.tar.gz)    tar xzf $1     ;;
       *.bz2)       bunzip2 $1     ;;
       *.rar)       unrar e $1     ;;
       *.gz)        gunzip $1      ;;
       *.tar)       tar xf $1      ;;
       *.tbz2)      tar xjf $1     ;;
       *.tgz)       tar xzf $1     ;;
       *.zip)       unzip $1       ;;
       *.Z)         uncompress $1  ;;
       *.7z)        7z x $1        ;;
       *)     echo "'$1' cannot be extracted via extract()" ;;
     esac
  else
    echo "'$1' is not a valid file"
  fi
}


#   ---------------------------
#   4. SEARCHING
#   ---------------------------

alias qfind="find . -name "

spotlight () { mdfind "kMDItemDisplayName == '$@'wc"; }


#   ---------------------------
#   5. PROCESS MANAGEMENT
#   ---------------------------

findPid () { lsof -t -c "$@" ; }


alias memhogstop='top -l 1 -o rsize | head -20'
alias memhogsps='ps wwaxm -o pid,stat,vsize,rss,time,comm | head -10'
alias memhogs=memhogsps

alias cpuhogs='ps wwaxr -o pid,stat,%cpu,time,comm | head -10'

alias memtop='top -R -F -s 10 -o rsize'
alias cputop='top -R -F -s 10 -o cpu'

my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,comm ; }


#   ---------------------------
#   6. NETWORKING
#   ---------------------------

alias myip='dig +short myip.opendns.com @resolver1.opendns.com'

myiip () {
  local ip i
  ip=""
  i=0
  while [[ -z $ip && $i < 10 ]]; do
    ip=`ipconfig getifaddr en${i}`
    if [[ ! -z $ip ]]; then
      break
    fi
    i=$((i + 1))
  done
  echo $ip
}

netexp () {
  echo "Pinging Network..."
  ping `myiip | sed 's/\([0-9]*\.[0-9]*\.[0-9]*\.\)[0-9]*/\1255/'` -c5 -q > /dev/null
  eval 'arp -a'
}

alias netcons="lsof -i"
alias openports="lsof -i | grep LISTEN"
alias suopenports="sudo lsof -i | grep LISTEN"

alias lsock="sudo /usr/sbin/lsof -i -P"
alias lsockU="sudo /usr/sbin/lsof -nP | grep UDP"
alias lsockT="sudo /usr/sbin/lsof -nP | grep TCP"

alias users="w -h"

vnc () {
    eval "open vnc://$1"
}

#   ---------------------------------------
#   7. SYSTEMS OPERATIONS & INFORMATION
#   ---------------------------------------

alias cleanupDS="find . -type f -name '*.DS_Store' -ls -delete"

alias finderShowHidden='defaults write com.apple.finder ShowAllFiles TRUE'
alias finderHideHidden='defaults write com.apple.finder ShowAllFiles FALSE'


alias editHosts='sudo vim /etc/hosts'


#   ---------------------------------------
#   8. APPLICATIONS
#   ---------------------------------------

alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --new-window"

google (){
 eval "/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --new-window https://google.com/search?q='$@'"
}

alias inbox="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --new-window https://inbox.google.com"



#   ---------------------------------------
#   9. HELPER FUNCTIONS
#   ---------------------------------------

## based on https://coderwall.com/p/pn8f0g/show-your-git-status-and-branch-in-color-at-the-command-prompt
function git_branch {
  local git_status="$(git status 2> /dev/null)"
  local on_branch="On branch ([^${IFS}]*)"
  local on_commit="HEAD detached at ([^${IFS}]*)"

  if [[ $git_status != "" ]]; then
    local branch_msg="(";
  else
    local branch_msg="              "
  fi

  if [[ $git_status =~ "Untracked files:" || $git_status =~ "Changes not staged for commit:" ]]; then
    branch_msg+="> "
  elif [[ $git_status =~ "" ]]; then
    branch_msg+=""
  fi

  if [[ $git_status =~ $on_branch ]]; then
    local branch=${BASH_REMATCH[1]}
    branch_msg+="$branch"
  elif [[ $git_status =~ $on_commit ]]; then
    local commit=${BASH_REMATCH[1]}
    branch_msg+="$commit"
  fi

  if [[ $git_status =~ "Your branch is ahead of" ]]; then
    branch_msg+=" +"
    local num=`git status | grep -o '[0-9]\+'`
    branch_msg+="$num"
  elif [[ $git_status =~ "" ]]; then
    branch_msg+=""
  fi

  if [[ $git_status =~ "Changes to be committed:" ]]; then
    branch_msg+="*"
  elif [[ $git_status =~ "" ]]; then
    branch_msg+=""
  fi

  if [[ $git_status != "" ]]; then
    branch_msg+=")"
  fi

  echo "$branch_msg"
}
